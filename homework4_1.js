 
// 1
console.log('number' + 3 + 3); 
// 'number3' + 3 → 'number33' 
// JS бачить перший операнд як рядок і переводить все в рядки
// Результат: 'number33'

// 2
console.log(null + 3); 
// null → 0 → 0 + 3 = 3 
// null → при арифметичних операціях стає 0
// Результат: 3

// 3
console.log(5 && "qwerty"); 
// 5 є truthy, тому повертає друге значення: "qwerty"
// У логічних виразах && повертає останнє правдиве значення
// Результат: 'qwerty'

// 4
console.log(+'40' + +'2' + "hillel"); 
// +'40' = 40, +'2' = 2 → 40 + 2 = 42 + "hillel" = '42hillel'
// Унарний плюс перетворює рядки в числа, а потім працює конкатенація
// Результат: '42hillel'

// 5
console.log('10' - 5 === 6); 
// '10' → 10 → 10 - 5 = 5 === 6 → false
// Результат: false

// 6
console.log(true + false); 
// true → 1, false → 0 → 1 + 0 = 1
// Булеві значення автоматично перетворюються на числа у арифметиці
// Результат: 1

// 7
console.log('4px' - 3); 
// '4px' не можна перетворити на число → NaN - 3 = NaN
// JS не може відняти число від нечислового рядка
// Результат: NaN

// 8
console.log('4' - 3); 
// '4' → 4 → 4 - 3 = 1
// JS перетворює рядок в число через -
// Результат: 1

// 9
console.log('6' + 3 ** 0); 
// 3 ** 0 = 1 → '6' + 1 = '61'
// Рядок + число → завжди буде рядок
// Результат: '61'

// 10
console.log(12 / '6'); 
// '6' → 6 → 12 / 6 = 2
// JS перетворює рядок у число автоматично в арифметичних операціях
// Результат: 2

// 11
console.log('10' + (5 === 6)); 
// 5 === 6 → false → '10' + false = '10false'
// Рядок + булеве → все стає рядком
// Результат: '10false'

// 12
console.log(null == ''); 
// null == undefined → true, але null != ''
// null не дорівнює порожньому рядку навіть у слабкому порівнянні
// Результат: false

// 13
console.log(3 ** (9 / 3)); 
// 9 / 3 = 3 → 3 ** 3 = 27
// Степеневе обчислення як у математиці
// Результат: 27

// 14
console.log(!!'false' == !!'true'); 
// 'false' і 'true' як строки → truthy → !!'false' = true, !!'true' = true → true == true
// !! приводить до булевого типу, а непорожній рядок — це завжди true
// Результат: true

// 15
console.log(0 || '0' && 1); 
// '0' && 1 → 1 → 0 || 1 = 1
//  && має вищий пріоритет за ||
// Результат: 1

// 16
console.log((+null == false) < 1); 
// +null = 0 → 0 == false → true → true < 1 = true
// Результат: false

// 17
console.log(false && true || true); 
// false && true = false → false || true = true
// JS виконує && спочатку, потім ||
// Результат: true

// 18
console.log(false && (false || true)); 
// false || true = true → false && true = false
// Якщо перше значення в && — false, далі вже нічого не важить
// Результат: false

// 19
console.log((+null == false) < 1 ** 5); 
// +null = 0 → 0 == false → true → 1 ** 5 = 1 → true < 1 = false
// Результат: false
